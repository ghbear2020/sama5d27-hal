<?xml version="1.0" encoding="UTF-8"?>

<infocenter_data version="1.0">
  <iar_name>usb_iad_cdc_msd example </iar_name>               <!--App-->
  <iar_description>

 The USB CDCMSD Project will help you to get familiar with the
 USB Device Port(UDP)interface and also some of the other interfaces in
 SAMA5 microcontrollers. Also it can help you to be familiar with the USB
 Framework that is used for rapid development of USB-compliant class
 drivers such as USB Communication Device class (CDC), and how to combine
 two USB functions to a single CDCMSD device (such as CDC + MSD).


 This file contains all the specific code for the
 usb_iad_cdc_msd project
/
/*---------------------------------------------------------------------------
         Headers
---------------------------------------------------------------------------*/
#include "board.h"
#include "chip.h"
#include "trace.h"
#include "compiler.h"
#include "serial/console.h"
#include "gpio/pio.h"
#include "libstoragemedia/media.h"
#include "libstoragemedia/media_private.h"
#include "libstoragemedia/media_ramdisk.h"
#include "usb/device/msd/msd_driver.h"
#include "usb/device/msd/msd_lun.h"
#include "usb/device/composite/cdc_msd_driver.h"
#include "usb/device/cdc/cdcd_serial.h"
#include "../usb_common/main_usb_common.h"
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
/*---------------------------------------------------------------------------
      Definitions
---------------------------------------------------------------------------*/
/** Size in bytes of the packet used for reading data from USB/
#define DATAPACKETSIZE 1024
/** Size in bytes of the buffer used for reading data from the USB & USART/
#define DATABUFFERSIZE (DATAPACKETSIZE+2)
/** Maximum number of LUNs which can be defined./
#define MAX_LUNS            1
/** Media index for different disks/
#define DRV_RAMDISK         0    /**< RAM disk/
#define DRV_SDMMC           1    /**< SD card/
#define DRV_NAND            2    /**< Nand flash/
/** Size of one block in bytes./
#define BLOCK_SIZE          512
/** Size of the MSD IO buffer in bytes (6K, more the better)./
#define MSD_BUFFER_SIZE     (128*BLOCK_SIZE)
/* Ramdisk size: at least 20K (Windows can not format the disk if lower than 20K)/
#if defined(CONFIG_BOARD_SAME70_XPLAINED) || defined(CONFIG_BOARD_SAMV71_XPLAINED)
  #define RAMDISK_SIZE        (32*1024)
#else
  #define RAMDISK_SIZE        (8*1024*1024)
#endif
/** Size of the reserved DDRAM (32M)/
#define DDRAM_RESERVE_SIZE  (32*1024*1024)
/** Size of the reserved Nand Flash (4M)/
#define NF_RESERVE_SIZE     (4*1024*1024)
/** Size of the managed Nand Flash (128M)/
#define NF_MANAGED_SIZE     (128*1024*1024)
/** Delay for MSD refresh (*4ms)/
#define MSD_REFRESH_DELAY    250
/** Delay for waiting DBGU input (*4ms)/
#define INPUT_DELAY          (2*250)
/*---------------------------------------------------------------------------
      External variables
---------------------------------------------------------------------------*/
/** Descriptor list for the device to bring up/
extern const USBDDriverDescriptors cdc_msdd_driver_descriptors;
/*---------------------------------------------------------------------------
      Internal variables
---------------------------------------------------------------------------*/
SECTION(".region_ddr")
ALIGNED(BLOCK_SIZE)
static uint8_t ramdisk_reserved[RAMDISK_SIZE];
/** Buffer for storing incoming USB data./
SECTION(".region_ddr")
ALIGNED(BLOCK_SIZE)
static uint8_t usb_serial_buffer0[DATABUFFERSIZE];
/** Serial port openned/
static uint8_t is_serial_port_on = 0;
/*- MSD/
/** Available medias./
struct _media medias[MAX_LUNS];
/** Device LUNs./
MSDLun luns[MAX_LUNS];
/** LUN read/write buffer./
SECTION(".region_ddr")
ALIGNED(BLOCK_SIZE)
uint8_t msd_buffer[MSD_BUFFER_SIZE];
/** Total data write to disk/
uint32_t msd_write_total = 0;
/** Delay for data write refresh/
uint32_t msd_delay = MSD_REFRESH_DELAY;
/** Delay TO event/
uint8_t  msd_refresh = 0;
/**
 Invoked when the configuration of the device changes. Parse used endpoints.
 \param cfgnum New configuration number.
/
void usbd_driver_callbacks_configuration_changed(uint8_t cfgnum)
{
	cdc_msd_driver_configuration_changed_handler(cfgnum);
}
/**
 Invoked when a new SETUP request is received from the host. Forwards the
 request to the Mass Storage device driver handler function.
 \param request  Pointer to a USBGenericRequest instance.
/
void usbd_callbacks_request_received(const USBGenericRequestrequest)
{
	cdc_msd_driver_request_handler(request);
}
/*----------------------------------------------------------------------------
         Callbacks
----------------------------------------------------------------------------*/
/**
 Invoked when the MSD finish a READ/WRITE.
 \param flow_direction 1 - device to host (READ10)
                      0 - host to device (WRITE10)
 \param data_length Length of data transferred in bytes.
 \param fifo_null_count Times that FIFO is NULL to wait
 \param fifo_full_count Times that FIFO is filled to wait
/
static void msd_callbacks_data(uint8_t flow_direction,
	
	
	
{
	fifo_null_count = fifo_null_count; /*dummy/
	fifo_full_count = fifo_full_count; /*dummy/
	if (!flow_direction)
	
}
/**
 Invoked when the CDC ControlLineState is changed
 \param DTR   New DTR value.
 \param RTS   New RTS value.
/
void cdcd_serial_control_line_sate_changed(uint8_t DTR, uint8_t RTS);
void cdcd_serial_control_line_sate_changed(uint8_t DTR, uint8_t RTS)
{
	is_serial_port_on = DTR;
	RTS = RTS; /* dummy/
}
/**
 Invoked when the CDC LineCoding is requested to changed
 \param pLineCoding   Pointer to new LineCoding settings.
 \return USBRC_SUCCESS if ready to receive the line coding.
/
uint8_t cdcd_serial_line_coding_is_to_change(CDCLineCodingline_coding)
{
	line_coding = line_coding; /*dummy/
	return USBD_STATUS_SUCCESS;
}
/*---------------------------------------------------------------------------
         Internal functions
---------------------------------------------------------------------------*/
/**
 Initialize DDRAM to assign ramdisk block
/
static void ram_disk_init(void)
{
	trace_info("RamDisk @ %x, size %d\n\r", (DDR_CS_ADDR + DDRAM_RESERVE_SIZE),
	
	media_ramdisk_init(&(medias[DRV_RAMDISK]),
	
	
	
	lun_init(&(luns[DRV_RAMDISK]),
	
	
	
	
}
/**
 Initialize MSD Media & LUNs
/
static void _memories_initialize(void)
{
	uint32_t i ;
	/* Reset all LUNs/
	for (i = 0; i < MAX_LUNS; i ++)
	
	/* RAM disk initialize/
	ram_disk_init();
}
static void _usb_data_received(voidread, uint8_t status, uint32_t received,
	
{
	if (status == USBD_STATUS_SUCCESS)
	
	else
	
}
/*---------------------------------------------------------------------------
         Exported function
---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------
          Main
---------------------------------------------------------------------------*/
/**
 Initializes drivers and start the USB CDCMSD device.
/
int main(void)
{
	uint8_t usb_connected = 0, serial_on = 0;
	uint8_t serial_read = 1;
	/* Output example information/
	console_example_info("USB CDCMSD Device Example");
	/* If there is on board power, switch it off/
	usb_power_configure();
	/* ----- MSD Function Initialize/
	/* Configure memories/
	_memories_initialize();
	/* USB CDCMSD driver initialization/
	cdc_msd_driver_initialize(&cdc_msdd_driver_descriptors, luns, MAX_LUNS);
	/* connect if needed/
	usb_vbus_configure();
	/* Driver loop/
	while (1) {
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	}
}
/** \endcond/
  </iar_description>  <!--App short description-->
  <iar_curdir>$CUR_DIR$</iar_curdir>
</infocenter_data>
